spring:
  data:
    redis:
      port: 6379
      timeout: 2000
      password:
  datasource:
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}
    hikari:
      connection-timeout: 30000  # 30초 연결 제한
  #  h2:
  #    console:
  #      enabled: true  # H2 웹 콘솔 활성화
  #      path: /h2-console  # H2 콘솔 URL 경로 (기본값: /h2-console)
  jpa:
    show-sql: true  # SQL 로그 출력
    hibernate:
      ddl-auto: validate # create # update
    properties:
      hibernate:
        format_sql: true  # SQL 로그를 보기 좋게 포맷
        auto_quote_keyword: true  # 예약어를 자동으로 따옴표 처리
        order_inserts: true
        order_updates: true
        jdbc:
          batch_size: 1000
          time_zone: UTC
  flyway:
    baseline-on-migrate: true # 기존 스키마가 있을 때 베이스라인 설정
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: openid, email, profile
          github:
            scope: user:email, repo, admin:repo_hook
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GMAIL_USERNAME}         # 실제 Gmail 계정
    password: ${GMAIL_APP_PASSWORD}    # Gmail 앱 비밀번호
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
      # 발신자 정보 추가
      from:
        name: "Gitdeun"
        email: ${GMAIL_USERNAME}
  profiles:
    active: dev, s3Bucket  # logback-spring SpringProfile 설정 및 AWS S3 Bucket 설정
  servlet:
    multipart:
      max-file-size: 10MB          # 개별 파일의 최대 크기
      max-request-size: 50MB       # 요청 전체(모든 파일 + 폼 데이터)의 최대 크기

server:
  tomcat:
    max-parameter-count: 15000    # 파라미터 개수
    max-part-count: 200            # 파트(파일+필드) 개수 상향
    max-part-header-size: 4096    # 파일명이 길거나 커스텀 헤더 많을 때

db:
  crypto-key: ${CRYPTO_KEY}

jwt:
  issuer: Gitdeun.site
  secret-key: ${JWT_SECRET_KEY}
